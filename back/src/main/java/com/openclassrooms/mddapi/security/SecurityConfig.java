package com.openclassrooms.mddapi.security;import com.openclassrooms.mddapi.security.jwt.AuthTokenFilter;import com.openclassrooms.mddapi.security.services.UserDetailsServiceImpl;import org.springframework.beans.factory.annotation.Autowired;import org.springframework.context.annotation.Bean;import org.springframework.context.annotation.Configuration;import org.springframework.security.authentication.AuthenticationManager;import org.springframework.security.authentication.AuthenticationProvider;import org.springframework.security.authentication.dao.DaoAuthenticationProvider;import org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;import org.springframework.security.config.annotation.web.builders.HttpSecurity;import org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;import org.springframework.security.config.http.SessionCreationPolicy;import org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;import org.springframework.security.crypto.password.PasswordEncoder;import org.springframework.security.web.SecurityFilterChain;import org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;@Configuration@EnableWebSecuritypublic class SecurityConfig {    @Autowired    UserDetailsServiceImpl userDetailsService;    @Autowired    private AuthTokenFilter jwtAuthorizationFilter;    @Bean    public SecurityFilterChain securityFilterChain(HttpSecurity http) throws Exception{        //Disable Csrf Token        return  http                .csrf(customiser->customiser.disable())                .authorizeHttpRequests(request-> request                        .requestMatchers(WHITE_LIST_URL).permitAll()                        .requestMatchers("/images/**", "/js/**", "/css/**", "/webjars/**").permitAll()                        .anyRequest().authenticated())                .sessionManagement(session-> session.sessionCreationPolicy(SessionCreationPolicy.STATELESS))                .addFilterBefore(jwtAuthorizationFilter, UsernamePasswordAuthenticationFilter.class)                .build();    }    @Bean    public AuthenticationProvider authenticationProvider(){        DaoAuthenticationProvider provider= new DaoAuthenticationProvider();        provider.setPasswordEncoder(new BCryptPasswordEncoder(12));        provider.setUserDetailsService(userDetailsService);        return  provider;    }    @Bean    public AuthenticationManager authenticationManager(AuthenticationConfiguration authConfig) throws Exception {        return authConfig.getAuthenticationManager();    }    @Bean    public PasswordEncoder passwordEncoder() {        return new BCryptPasswordEncoder();    }    private static final String[] WHITE_LIST_URL = {            "/api/auth/register",            "/api/auth/login",            "/v3/api-docs/**",            "/swagger-ui/**"    };}